<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20170901T081315Z" application="Evernote/Windows" version="6.x">
<note><title>ECMA-Script6</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div><div><br/></div><hr/><div><span style="font-size: 19px;"><span style="font-size: 19px; color: rgb(255, 0, 0); font-weight: bold;">let关键字</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); font-weight: bold;">用来替代var 的关键字</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">for(var i=0; i&lt;5; i++){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;setTimeout(function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(i);&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},1000);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">你认为弹出的结果是多少？</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">结果： 5,5,5,5,5</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">是不是跟你认为的0，1，2，3，4不太一样？？？</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">原因就在于，var i=0，定义的不是局部变量，而是全局变量，这里不会形成闭包。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">再举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">for(var i=0; i&lt;5; i++){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i=0; i&lt;5; i++){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(i);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">你认为打印的结果是多少？</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">结果： 1 2 3 4 5</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">难到不是打印25次么？</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">原因还是因为，像for循环的大括号，是不会形成作用域的</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">那么如何在一个语句块中定义局部变量呢？</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">那就是使用let,不过目前大多数的ES6只允许在严格模式下使用</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">&quot;use strict&quot;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">for(let i=0; i&lt;3; i++){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">&nbsp; &nbsp; &nbsp;setTimeout(function(){ alert(i) },1000);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">我们尝试一下if语句的大括号</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">&quot;use strict&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">let a = 10;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">if(window) {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let a = 100;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(a);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">console.log(a)；</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">结果： 100 &nbsp;10</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">从标准的ES6开始，我们有了块级作用域</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">例如：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">function m(){ &nbsp;console.log(&quot;111111111&quot;) }</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">if( flag &gt; 5) {</span></span></div><div><span style="background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">function m(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">console.log(&quot;2222222222&quot;)</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">m();</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">在ES5中，函数m会在第二次定义时被覆盖。 结果： 222222222222</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">在ES6中，则会出现 111111111111的结果。</span></span></div></div><div><br/></div><div><span style="font-size: 19px;"><span style="font-size: 19px; color: rgb(255, 0, 0); font-weight: bold;">const</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">我们终于可以定义常量了！</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(45, 79, 201); font-weight: bold;">const</span> GD_TYPE_NORMAL = 1;</span></div></div><div><br/></div><div><span style="font-size: 19px;"><span style="font-size: 19px; color: rgb(255, 0, 0); font-weight: bold;">=&gt;箭头函数</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">这个我个人不推荐使用，待会再说原因，先讲优点！</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">先看区别吧，原来的写法</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">var test = function(x){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;return x+2;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">使用箭头函数：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">var test = x=&gt;x+2;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">看起很简单吧？ 省略了function、return关键字和大括号。 &nbsp;使用方法跟以前一样没区别</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">test(5); &nbsp;结果： 7</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">还有好处就是，自动绑定this，或者说this指向不发生改变</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var obj = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;left : 200,</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;move : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setTimeout(function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; //this.left = 100; &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以前这里不能写this</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},1000);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">使用了箭头函数：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var obj = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;left : 200,</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;move : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setTimeout( <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">()=&gt;{</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.left = 100; &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span>,1000);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">当然也有一些缺陷</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">第一：</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">箭头函数是不能new的，它的设计初衷就跟构造函数不太一样</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">第二：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">箭头函数如果要返回一个JSON对象，必须用小括号包起来</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">var test = ()=&gt;({id:3, val=20})</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">箭头函数现在非常流行，但我个人并不觉得它有那么美好。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">主要是因为，这样的设计对代码的可读性伤害太大了</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">引用国际著名OO专家、敏捷开发创始人 马丁.福勒的一句名言：</span></span></div><div align="justify" style="min-height: 13pt;"><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196); font-family: 宋体;">任何一个傻瓜都能写出计算器可以理解的代码。惟有写出人类容易理解的代码，才是优秀的程序员。</span></span></div></div><div><br/></div><div><span style="font-size: 15px;"><span style="letter-spacing: normal; orphans: auto; text-align: start; text-indent: 16px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; background-color: rgb(254, 254, 254); font-size: 15px; display: inline !important; color: rgb(118, 0, 216); font-style: normal; font-variant: normal; font-weight: normal;">……我们读代码的时间和写代码的时间比率是10：1。这意味着我们大部分时间都在阅读老代码，</span></span></div><div><span style="font-size: 15px;"><span style="letter-spacing: normal; orphans: auto; text-align: start; text-indent: 16px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; background-color: rgb(254, 254, 254); font-size: 15px; display: inline !important; color: rgb(118, 0, 216); font-style: normal; font-variant: normal; font-weight: normal;">以便于之后新代码的编写。因为读代码占得比重太大了，因此我们希望在阅读代码的时候能够更</span></span></div><div><span style="font-size: 15px;"><span style="letter-spacing: normal; orphans: auto; text-align: start; text-indent: 16px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; background-color: rgb(254, 254, 254); font-size: 15px; display: inline !important; color: rgb(118, 0, 216); font-style: normal; font-variant: normal; font-weight: normal;">加轻松，即便在编写代码的时候需要费点劲。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">这一段好像也是他老人家说的，我觉得很有道理。</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">省略掉一个function单词，并不能给开发效率提高多少，但牺牲的却是最基本的代码可读性</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">除了数学运算，我们几乎从来不用符号表示一些复杂的含义。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">甚至以前有人质疑过JQ关于each方法的设计思想，认为它屏蔽了程序最基本的逻辑，那就是循环</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">代码的可读性收到了严重伤害。不过</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">我们仔细看看forEach、map、filter这些函数，</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">尽管它们屏蔽了for循环，但分析这些单词的含义：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">each 每个</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">map 映射（一一对应）</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">filter 过滤</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">它们其实全部都隐含 的表达了遍历的意思。</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">回过头来我们再看，从function到=&gt;，这东西连个象形符号都算不上</span></span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">这就是为什么数学有那么多的符号可以用来交流，但我们却从不把它称为</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">语言</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">。</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">再举个例子，你看下面这段代码：</span></span></div><div><span style="background-color: rgb(251, 250, 248);">(?:[a-z0-9!#$%&amp;&apos;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;&apos;*+/=?^_`{|}~-]+)*|&quot;(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*&quot;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">给你3分钟，能看懂吗？</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">它为什么这么复杂？实际上就是因为它全部都使用了非象形符号表示的</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">因此正则表达式才会成为最难交流以及阅读的编程语言</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">但是！</span>我们必须承认，它确实给我们的验证工作提升了百倍以上的效率</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">权衡利弊，我有理由喜欢它</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">但是这个箭头函数，在多数情况下，我不推荐使用</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">就像你的代码里不能满屏幕充斥着 &nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">三目运算符 &nbsp; 和 &nbsp;Math.max(xx, Math.min(xx, obj) )这样的东西</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">这样真的好吗？</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">在写回调的时候，偶尔用用箭头函数，还是不错的</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(118, 0, 216);">[2,3,9,14,8,29,93,30].sort( (a,b) =&gt; a-b );</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); font-weight: bold;">个人观点，仅供参考。</span></div><div><br/></div></div><div><br/></div><div><span style="font-size: 19px;"><span style="font-size: 19px; color: rgb(255, 0, 0); font-weight: bold;">Destructuring 解构</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">以前我们定义多个变量，可以这样写：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var x=10,y=20,z=30;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">现在我们可以这样写：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">let [x,y,z] = [10,20,30];</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">let [x,[a,b],y] = [10,[15,18],20];</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">这并不是在定义数组，而是通过等号两边的结构匹配，进行赋值。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">当然，如果你写的不够规范：</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">let [x,y] = [10,20,30]; //结果x=10,y=20</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">let [x,[a,b],y] = [10,[5],20]; &nbsp;//结果x=10,a=5,y=20,b=undefined</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">浏览器并不会报错，依然赋值成功。</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">甚至可以使用对象来赋值</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">var {id,name,age} = {id:43,name:&apos;yt&apos;,age:30}</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">解构赋值的用途：</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">1 交换变量的值</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">&nbsp;&nbsp;</span></span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">[a,b] = [b,a]; &nbsp;//排序可能会常用到</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">2 函数返回多个值，这个功能比较有颠覆性</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">var [r1,r2,r3] = exec();</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">function exec(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;return [&quot;结果a&quot;,</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&quot;结果b&quot;,</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&quot;结果c&quot;</span></span> <span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">];</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">3 函数的参数定义方式, 不用再考虑顺序</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">function exec({time, speed, pos}){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); font-weight: bold; line-height: 1.45;">执行函数：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">exec({</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">pos: {x:20,y:55},</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">speed: 50,</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time: 2000</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">})</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">默认值也可以顺便带上：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">function exec({ time=2000, speed=50, pos}){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">3 获取数组的指定元素(第一个和最后一个)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">var {0:head,arr.length-1:last} = arr;&nbsp;</span></div><div><br/></div></div><div><br/></div><div><span style="color: rgb(255, 0, 0); font-weight: bold;">字符串的一些方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196); font-weight: bold;">字符串模板, 使用反引号`表示，使用${变量|函数}嵌入代码</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">$(temp).html(</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;`你好，我的名字叫<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">${username}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; 接下来是我的自我介绍：</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">${introduce()}</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">`</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">使用`反引号包裹的字符串，可以当场模板来使用。</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">利用${ username } 输出变量</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">利用${ introduce() } 执行函数</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">经过测试，字符串模板默认会被转义，因此写入标签的话，会被原样输出</span></div><div><br/></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">新增的一些API方法，比较简单，这里不再介绍。请自行查阅文档</span></div></div><div><br/></div><div><span style="font-size: 19px; font-weight: bold;">写一个自己的模板引擎</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">var template = `&lt;ul&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;%</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">for(var i=0; i &lt; data.names.length; i++) {</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">%&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;li&gt;</span><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;%=</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">data.names[i]</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">%&gt;</span><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;/li&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;%</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">%&gt;</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;/ul&gt;&nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">test(template, {names:[&quot;张三&quot;,&quot;李四&quot;,&quot;tony stark&quot;,&quot;hulk&quot;]})</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">function test(temp, obj){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//正则处理字符串</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; temp = temp.replace(/&lt;%=(.+?)%&gt;/g,&quot;`) \n print($1) \n print(`&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; temp = temp.replace(/&lt;%(.+?)%&gt;/g,&quot;`) \n $1 \n print(`&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; temp = &quot;print(`&quot;+temp+&quot;`)&quot;;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//经过正则的处理，我们希望模板字符串变成如下形式:</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(26, 173, 224); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">/*******************************************&nbsp;</span></span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; print(`&lt;ul&gt;`)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; for(var i=0; i&lt;data.names.length; i++){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;li&gt;`)&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(data.names[i])&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;/li&gt;`)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; print(`&lt;/ul&gt;`)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; *********************************************/</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//准备一段代码，动态生成一个函数，把刚才准备好的temp代码嵌入当中</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; var funcStr = `<span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">(function(data){</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">var strhtml = &quot;&quot;;</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">function print(str){</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">strhtml += str;</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">}</span></span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp;</span> <span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;"><span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;-evernote-highlight:true;">${temp}</span></span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//把temp字符串放入该函数中，形成一个完整的函数</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">return strhtml;</span></span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;</span> <span style="background-color: rgb(255, 250, 165); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;-evernote-highlight:true;">})</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">`;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; /*************这段代码生成后的样子******************</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; (function(data){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; var strhtml = &quot;&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; function print(str){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;strhtml += str; &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;ul&gt;`)</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp; for(var i=0; i&lt;data.names.length; i++){</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;li&gt;`)</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(data.names[i])</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;/li&gt;`)</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp; }</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; print(`&lt;/ul&gt;`)</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; return strhtml;&nbsp;</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; })</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(88, 152, 255); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; *********************************************/</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//使用eval执行代码，生成并返回这个函数</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; var func = eval(funcStr);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//调用这个函数，得到最终的字符串模板</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; var res = func(obj);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; return res;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div><span style="color: rgb(255, 0, 0); font-weight: bold;">Math的一些方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">请自行查阅文档</span></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">数组的一些方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">将伪数组转为数组：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var list = Array.from(document.getElementsByTagName(&quot;li&quot;)); &nbsp;&nbsp;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">复制指定内容覆盖指定内容（指定数组的下标</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-weight: bold;">6、7</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">替换下标</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-weight: bold;">2</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">及以后</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var arr = [1,2,3,4,5,6,7,8,9,0];</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">arr.copyWithin(2,6,8);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">//[1,2,</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">7,8</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">,5,6,7,8,9,0]&nbsp;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">//find跟过filter差不多，不过在找到符合条件的元素后，返回元素并停止遍历</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[1, 5, 10, 15].find(function(value, index, arr) {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value &gt; 9;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">})</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">// 10</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">//跟find差不多，不过在找到符合条件的元素后，返回该元素的下标</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[1, 5, 10, 15].findIndex(function(value, index, arr) {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value &gt; 9;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">})</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">// 2</span></div><div><br/></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">Object.assign</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><b>合并对象</b></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">Object.assign({a:1},{b:2},{b:4,c:3});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//{a:1,b:4,c:3}</span></div><div><br/></div><div><br/></div><div><font style="font-size: 11pt;"><b>当然合并过程中做的是浅拷贝</b></font></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var a1 = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp; &nbsp; name: &quot;aaaa&quot;,</span><br/></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp; &nbsp; firend: {</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp;&nbsp; &nbsp;<span>&nbsp; &nbsp; name: &quot;cccc&quot;</span></span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span><span><span>&nbsp;&nbsp; &nbsp;</span>}</span><br/></span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var a2 = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp; &nbsp; age : 30</span><br/></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var b = Object.assign(a1,a2)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">a1.friend == b.friend</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><b>对于原型属性忽略</b></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var a = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; name: &quot;aaaa&quot;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var b = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp; &nbsp; age : 20</span><br/></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">b.__proto__.title = &quot;ma&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var c = Object.assign(a,b);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><br/></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">对于不可枚举属性忽略</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var a = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; name: &quot;aaaa&quot;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var b = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; age : 20</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">Object.defineProperty(b, &quot;age&quot;, {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span>&nbsp; &nbsp; enmuable : false</span><br/></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">})</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">对于引用类型，只拷贝引用</span></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">第七种数据类型Symbol</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var s1 = Symbol();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var s2 = Symbol();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var s3 = Symbol(&quot;abc&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var s4 = Symbol(&quot;abc&quot;)</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">s1不等于s2 &nbsp; &nbsp;s3不等于s4</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">Symbol函数会生成一个唯一的值</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">可以理解为Symbol类型跟字符串是接近的</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">但每次生成唯一的值，也就是每次都不相等，至于它等于多少，并不重要</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">这对于一些字典变量，比较有用</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">const TYPE = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;SMALL: Symbol(),</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;MIDDLE:</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">Symbol()</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">,</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;LARGE:&nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">Symbol(),</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;COM_SMALL:&nbsp;</span></span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">Symbol(),</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;COM_MIDDLE:&nbsp;</span></span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">Symbol()</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//以前我们可能会把SMALL、MIDDLE、LARGE赋值为数字或字符串</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//还要确保它们的值不能发生重复，但现在不用担心了</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">function Create(type){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;switch(type){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">TYPE.SMALL</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">: {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .....</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">TYPE.MIDDLE</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">: {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .....</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">TYPE.LARGE</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">: {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .....</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var s = Create(TYPE.MIDDLE);</span></div><div><br/></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">Set和Map集合</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">想当初设计JS的时候，由于有SUN公司人员的参与</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">再加上当时如日中天的JAVA及其优秀的设计，才使得JS语法及内存设计跟JAVA会如此的接近。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">但JAVA很多优秀的内容，JS不知道为了什么目的并没有引入，例如Set和Map集合</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(51, 51, 51); font-weight: bold;">Set集合，本质上就是对数组的一种包装</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">例如：</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">let imgs = new Set();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(1）;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(1）;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(5）;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(&quot;5&quot;）;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(new String(&quot;abc&quot;)）;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">imgs.add(new String(&quot;abc&quot;)）;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">打印的结果：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">1 &nbsp;5 &nbsp;&apos;5&apos; &nbsp;&apos;abc&apos; &nbsp;&apos;abc&apos;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">Set集合是默认去重复的，但前提是两个添加的元素严格相等</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">所以5和&quot;5&quot;不相等，两个new出来的字符串不相等</span></div><div><br/></div><div>如何删除元素 set.delete(key)</div><div>imgs.delete(5);</div><div><br/></div><div>imgs.delete(&apos;5&apos;);</div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">关于遍历的方法</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">由于Set集合本质上还是一个map，因此会有以下几种奇怪的遍历方法</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var imgs = new Set([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">//根据KEY遍历</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">for(let item of imgs.keys()){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;console.log(item);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//a</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//b</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//c</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">//根据VALUE遍历</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">for(let item of imgs.values()){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;console.log(item);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//a</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//b</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//c</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">//根据KEY-VALUE遍历</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">for(let item of imgs.entries()){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;console.log(item);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//[&apos;a&apos;,&apos;a&apos;]</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//[&apos;b&apos;,&apos;b&apos;]</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//[&apos;c&apos;,&apos;c&apos;]</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">//普通for...of循环(for...of跟for-in的区别很明显，就是直接取值，而不再取下标了)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">for(let item of imgs){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;console.log(item);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//a</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//b</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//c</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">SET集合没有提供下标方式的访问，因此只能使用for来遍历。</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">// 下面展示了一种极为精巧利用set集合对数组去重的方法</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">var newarr = [...new Set(array)];</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">=============================================================================</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(51, 51, 51); font-weight: bold;">Map集合,即映射</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">let map = new Map();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">map.set(&quot;S230&quot;, &quot;张三&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">map.set(&quot;S231&quot;, &quot;李四&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">map.set(&quot;S232&quot;, &quot;王五&quot;);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">获取某一个元素</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">map.get(&quot;s232&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">//王五</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(222, 87, 0);">//循环遍历，配合解构赋值</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">for(let [key,value] of map){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;console.log(key,value);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">map.has(key); &nbsp;//返回布尔值，判断是否含有键key</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">map.delete(key); &nbsp;//删除</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); line-height: 21px;">map.size &nbsp; &nbsp;//长度</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); line-height: 21px;">map.clear() &nbsp; //清空</span></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">Promise规范</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">新推出的Promise函数，是一个构造函数，它实际上是对回调函数的一种封装</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">对异步编程的一种改进，当然，如果只是写法上的改进，那就意义不大了。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">下面我们看看它能解决哪些以前难以解决的问题：</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">问题1： 当有两个或以上的ajax请求需要按顺序执行，该如何编写？</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">//以下是伪代码</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">ajax1({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;url: &quot;xxxxx&quot;,</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;success: function(data1){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //在这里，当ajax1完成后，才能开启ajax2&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax2({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;url: &quot;xxxxx&quot;,</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;success: function(data2){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//第二次完成的回调，可能还有第三个\第四个无止境的嵌套....</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;error: function(msg){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;console.log(&quot;请求出现错误:&quot;,msg);&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">});</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">而使用promise的写法如下：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">new Promise(function(resolve, reject){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">ajax1</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;xxxxx&quot;,</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> success: function(data){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196); font-weight: bold;">resolve</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error: function(msg){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-weight: bold;">reject</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}).</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">then</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">(function(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">ajax2</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;xxxx&quot;,</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; success: function(data){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">).</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">catch</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">(</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">function(){</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">console.log(&quot;请求出现错误:&quot;,msg);</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">);</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">也就是代码被改进成了new Promise(ajax1).then(ajax2).catch()</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">使用了链式调用代替了嵌套结构。</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(118, 0, 216);">resolve</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">() 和</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">reject</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">() 则意味着成功回调和失败回调的执行。</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">如果有三个或更多的ajax请求呢？</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">new Promise(function(resolve, reject){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">ajax1</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;xxxxx&quot;,</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> success: function(data){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196); font-weight: bold;">resolve</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//use data.......</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error: function(msg){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-weight: bold;">reject</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}).</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">then</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">(function(){</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">return new Promise(function(resolve, reject){</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">ajax2</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">({</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;xxxx&quot;,</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function(data){</span></div><div style="margin-left: 40px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196); font-weight: bold;">resolve</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//use data.......</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error: function(msg){</span></div><div style="margin-left: 40px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-weight: bold;">reject</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">();</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span></span></div><div style="margin-left: 40px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">})</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">)</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">.</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">then</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">(function(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">ajax3</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">({</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url: &quot;xxxx&quot;,</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function(data){</span></div><div><span style="background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//use data.......</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error: function(msg){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //print msg</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">});</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">为了简化代码，我这里将catch方法省略了</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">代码结构大概是这样的：</span>&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196); font-weight: bold;">new Promise(ajax1).then(function(){ return</span></span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196); font-weight: bold;">new Promise(ajax2)</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196); font-weight: bold;">}).then(ajax3);</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">如果有第四个请求要顺序执行,则大概写成这样：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">new Promise(ajax1)</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">.then(</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">function(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</span></span> <span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">new Promise(ajax2)</span></span></div><div><span style="background-color: rgb(251, 250, 248); font-weight: bold;">}</span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">)</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">.then(</span></span><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">function(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</span></span> <span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">new Promise(ajax3)</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">)</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">.then(ajax4);</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">从这里仔细观察，可以看出，只有被Promise封装过了，回调才能保证顺序。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">也就是Promise（意为承诺）设计的初衷</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">但前一个方法必须在它最后，执行resolve()，后一个方法才可以开始。</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">如果执行了reject()，则进入catch()方法。&nbsp;</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">其实这里不能单纯的理解为 resolve就是success，reject就是error</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">现就职于阿里的大名鼎鼎的阮一峰老师，喜欢管它叫状态机，这是非常恰当的叫法。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">只有理解了它的设计思路，才能明白为什么叫状态机。</span></div><div><br/></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">//我们把代码写的再实际一些</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">new Promise(function(resolve, reject){ &nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88);">//<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88); font-weight: bold;">p1</span></span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ajax1({</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.........</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resovle()</span>&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">})</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">.then(function(){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">return new Promise</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">(resolve, reject ){ &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88);">//<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88); font-weight: bold;">p2</span></span></div><div style="margin-left: 40px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">ajax2</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">({</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.........</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resovle()</span>&nbsp;</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">).then(</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">function(){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">return new Promise</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">(resolve, reject ){ &nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88);">//<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88); font-weight: bold;">p3</span></span></div><div style="margin-left: 40px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">ajax3</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">({</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.........</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resovle()</span>&nbsp;</span></div><div style="margin-left: 40px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">)</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">如果，我们把每一个promise对象都看做一个状态机的话，它实际上只有三种状态</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">进行中</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">，</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">已完成</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">，</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">已失败，</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px;">它分别代表了所承诺的回调函数的执行状态。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">而resolve方法，只是把这个状态机从Pending(进行中) ，改成了Resolved(已完成)</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">由于p2现在依赖了p1，因此，p2会观察p1的状态，直到p1变为Resolved</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">p2才会开始， 但这时then方法返回的不再是p1，而是p2,因此p3会依赖p2的状态</span></div><div><br/></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); font-weight: bold;">问题2： 如果有三个ajax请求，调用顺序无关，但必须保证三个都成功，才能开始第四个？</span></div><div><br/></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); font-family: Tahoma;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; font-family: Tahoma; color: rgb(54, 101, 238);">Promise.all(function(){ &nbsp;</span> // <span style="background-color: rgb(251, 250, 248); font-size: 16px; font-family: Tahoma; font-weight: bold;">p123</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">&nbsp; &nbsp; &nbsp;return [p1,p2,p3];</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">}).</span><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">then(function(){</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">&nbsp; &nbsp; &nbsp;return p4;</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">});</span></span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">p4依赖</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">p123</span><span style="background-color: rgb(251, 250, 248); font-size: 15px;">的状态，那么理解了状态机，promise是不是如此简单呢？</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); font-weight: bold;">问题3： 如果有三个ajax请求，只要任意一个成功，则开始第四个？</span></div><div><br/></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248); font-family: Tahoma;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; font-family: Tahoma; color: rgb(54, 101, 238);">Promise.race(function(){ &nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 16px; font-family: Tahoma; font-weight: bold;">//p123</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">&nbsp; &nbsp; &nbsp;return [p1,p2,p3];</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">}).</span><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">then(</span></span><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">function(){</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">&nbsp; &nbsp; &nbsp;return p4;</span></span></div><div><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">}</span></span><span style="font-size: 16px;"><span style="background-color: rgb(251, 250, 248); font-size: 16px; color: rgb(54, 101, 238); font-family: Tahoma;">);</span></span></div></div><div><br/></div><div><span style="font-size: 16px; color: rgb(255, 0, 0); font-weight: bold;">Class保留字终于成了关键字</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">终于，我们在有生之年等到class出现了</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">这下，JS看起来更像一个标准的面相对象的语言了</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">以前编写一个构造函数（类）</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">function Pad(color){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;this.color = color;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">现在的写法跟Java更接近了</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">class</span> Iphone{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">constructor</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">(color, size){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.color = color;&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.size = size;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;playgame(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(121, 121, 121);">//.............</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;toString(){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">`这台手机的颜色是${this.color} 屏幕大小是${this.size}`</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">我们定义了一个类，名字叫Iphone</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">通过类生成一个实例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var iphone = new Iphone(&quot;白色&quot;, 5);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">其中</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">constructor</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">被称之为构造方法，在我们new 一个对象的时候，自动被调用</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">不过本质上，JS依然使用了原型来实现，也就是说，这不过是一个新的写法而已</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">跟以前的构造函数没有区别。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">要注意的是，使用了class来定义类，必须先定义再使用</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">以前这样写没有问题：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">new Person();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">function Person(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">现在这样写报错：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">new Person();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">class Person{</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp;constructor(){</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;&nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">甚至还可以定义一次性的类</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">let person = new class{</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp; constructor(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">这个类被定义出来，只能实例化一次，跟JAVA的匿名内部类很像</span></div><div><br/></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">关于继承</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">class Son</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">extends</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px;">Father{</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;constructor(age){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">super();</span> <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88);">//</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(188, 0, 88);">这相当于调用了父类的构造方法，类似于传统写法Father.call(this)</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(188, 0, 88);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">//但是</span></span></span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">这个方法是必须放在第一行先</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">调用</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.age = age;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><br/></div><div><br/></div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div style="text-align: center;"><en-media hash="7faab8796adebec8214d9866f099ed90" style="height: auto;" type="image/png"/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></div><div><br/></div><div><br/></div></en-note>]]></content><created>20161019T065052Z</created><updated>20170830T154813Z</updated><note-attributes><author>【千锋互联】JS高级讲师--尹涛</author><reminder-order>20170203T083628Z</reminder-order></note-attributes><resource><data encoding="base64">
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
YII=
</data><mime>image/png</mime><recognition><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE recoIndex PUBLIC "SYSTEM" "http://xml.evernote.com/pub/recoIndex.dtd"><recoIndex docType="unknown" objType="image" objID="7faab8796adebec8214d9866f099ed90" engineVersion="7.0.24.1" recoType="service" lang="zh" objWidth="343" objHeight="387"><item x="23" y="23" w="90" h="57"><t w="44">田’</t><t w="33">困安</t><t w="32">困軒</t><t w="32">困吁</t><t w="32">回安</t><t w="32">回吁</t><t w="32">回軒</t><t w="31">困暸</t><t w="31">口安</t><t w="31">回暸</t></item><item x="24" y="24" w="295" h="295"><t w="37">饑</t><t w="34">囊</t><t w="31">擺</t><t w="30">暴</t></item><item x="36" y="330" w="97" h="16"><t w="45">欢迎大家关注</t><t w="43">欢迎大家关汪</t><t w="42">欢迎大家夫注</t><t w="42">欢迎大家关洼</t><t w="42">欢迎大家夫汪</t><t w="42">欢迎大家芙注</t><t w="42">欢迎大家芙汪</t><t w="42">欢迎大家夫洼</t><t w="41">欢迎大家芙洼</t><t w="38">欢迎太家关注</t></item><item x="132" y="330" w="9" h="16"><t w="13">b</t></item><item x="141" y="332" w="8" h="13"><t w="81">口</t><t w="81">日</t></item><item x="163" y="330" w="83" h="16"><t w="38">利的公众号</t><t w="37">剌的公众号</t><t w="34">刺的公众号</t><t w="33">刹的公众号</t><t w="29">利臼公众号</t><t w="29">利回公众号</t><t w="29">利因公众号</t><t w="27">剌的公众喜</t><t w="27">剌的公众毒</t><t w="27">剌的公众譬</t></item><item x="246" y="330" w="53" h="16"><t w="49">〈淘理〉</t><t w="28">号&lt;淘理&gt;</t><t w="25">号&lt;淘選&gt;</t><t w="23">号碑理&gt;</t><t w="23">号雁理&gt;</t><t w="23">号磷理&gt;</t><t w="20">号&lt;淘理a</t><t w="18">号e淘理&gt;</t><t w="18">号&lt;淘選a</t><t w="17">寺淘理&gt;</t></item><item x="44" y="359" w="74" h="17"><t w="58">走出校门，</t><t w="41">走出校门</t><t w="39">走出枝门</t><t w="39">走出漓门</t><t w="38">走出稜门</t><t w="35">走出校? ?</t><t w="33">走出枝? ?</t><t w="33">走出漓? ?</t><t w="33">走出稜? ?</t><t w="33">走出校门8</t></item><item x="124" y="360" w="162" h="16"><t w="38">你依然可以跟我学知识</t><t w="34">依然可</t><t w="33">你依然可以踉我学知识</t><t w="32">你依然司以跟我学知识</t><t w="31">依熬可</t><t w="31">侬然可</t><t w="30">知识</t><t w="27">我学</t><t w="26">找学</t><t w="26">犹学</t></item></recoIndex>
]]></recognition><resource-attributes><source-url>file://C:\Users\acer\AppData\Local\Temp\公众号.png</source-url><file-name>公众号.png</file-name></resource-attributes></resource></note></en-export>
